/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lecarsystem;
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import static lecarsystem.LeCarSystem.employeeStatus;
import java.time.format.DateTimeFormatter;
import java.time.LocalDate;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
/**
 *
 * @author jze20
 */
public class EmployeePage extends javax.swing.JFrame {

    /**
     * Creates new form EmployeePage
     */
    public EmployeePage() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        File employee_csv = new File("employee.csv");
        DefaultTableModel employee_data = new DefaultTableModel();

        try{
            int start = 0;
            InputStreamReader inputstreamreader = new InputStreamReader(new FileInputStream(employee_csv));
            CSVParser csvParser = CSVFormat.DEFAULT.parse(inputstreamreader);

            for(CSVRecord csvRecord:csvParser){
                if(start == 0){
                    start =1;
                    employee_data.addColumn(csvRecord.get(0));
                    employee_data.addColumn(csvRecord.get(1));
                    employee_data.addColumn(csvRecord.get(2));
                    employee_data.addColumn(csvRecord.get(3));
                    employee_data.addColumn("employeeSalary");
                    employee_data.addColumn("employeeBonus");
                    employee_data.addColumn("totalSalary");
                }
                else
                {
                    double salary = employeeSalary(csvRecord.get(0),csvRecord.get(2),"","");
                    double bonus = employeeBonus(csvRecord.get(0),csvRecord.get(2),"","");
                    Vector row = new Vector();
                    row.add(csvRecord.get(0));
                    row.add(csvRecord.get(1));
                    row.add(csvRecord.get(2));
                    row.add(csvRecord.get(3));
                    row.add(salary);
                    row.add(bonus);
                    row.add(salary + bonus);
                    employee_data.addRow(row);
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        jTable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Employee");
        jLabel1.setFont(new Font("Sans-Serif",Font.BOLD,18));

        jTable1.setModel(employee_data);
        jScrollPane1.setViewportView(jTable1);

        jButton4.setBackground(Color.BLUE);
        jButton4.setForeground(Color.WHITE);
        jButton4.setFont(new Font("Serif",Font.PLAIN,13));
        jButton4.setText("Logout");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton1.setText("Add Management");
        jButton1.setBackground(Color.ORANGE);
        jButton1.setFont(new Font("Serif",Font.PLAIN,13));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Search");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jLabel2.setText("Year :");

        jLabel3.setText("Month :");

        jLabel4.setText("Name :");

        jMenu1.setText("Tables");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem1.setText("Sales");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem2.setText("Customer");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem3.setText("Vehicle");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem4.setText("Employee");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 708, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(91, 91, 91))
                                    .addComponent(jTextField2))))))
                .addGap(38, 38, 38))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addGap(35, 35, 35)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        if(evt.getSource() == jMenuItem2){
            new CustomerPage().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        if(evt.getSource() == jMenuItem3){
            new VehiclePage().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        if(evt.getSource() == jMenuItem1){
            new SalesPages().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == jButton4) 
        {
            int clear = JOptionPane.showConfirmDialog(null, "Logout ?");
            if (clear == JOptionPane.YES_OPTION)
            {  
                JOptionPane.showMessageDialog(null,"Logout Successful");
                employeeStatus = "0";
                new LeCarSystem().setVisible(true);
                this.dispose();
                
            } 
        } 

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new AddManagement().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if(evt.getSource() == jButton3){
            String word = jTextField2.getText();
            try{
                search(word);
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables

    private double employeeSalary(String employeeID, String status, String yearInput, String monthInput) throws Exception {
       
        double totalSalary, basicSalary, allowanceCap, commission = 0;
        
        String year, month;
        
        LocalDate currentDate = LocalDate.now();
        
        if (yearInput.isEmpty()){year = Integer.toString(currentDate.getYear());}
        else {year = yearInput;}

        if (monthInput.isEmpty()){month = Integer.toString(currentDate.getMonthValue());}
        else {
            if(monthInput.length() == 2){
                 month = monthInput;
            }else{
                 month = "0"+monthInput;
            }
               
        }

        
        if(status.equals("1")){
            basicSalary = 2200;
            allowanceCap = 350;
        }else{
           basicSalary = 1200;
            allowanceCap = 250;
        }
        
        List<String[]> salesData = readCsvFile("sales.csv");
        List<String[]> vehicleData = readCsvFile("vehicle.csv");
        
        for (String[] sales : salesData) {
           
            String date = sales[1];
            String dateString = year + "-" + month + "-01";
            LocalDate yearmonth = LocalDate.parse(dateString);
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM");
            String todayMonth = yearmonth.format(formatter);
            
            if (sales[4].equals(employeeID) && date.contains(todayMonth)){
                for (String[] vehicle : vehicleData) {
                    if(sales[2].equals(vehicle[0])){
                        commission += Double.parseDouble(vehicle[4]) * 0.01;
                        break;
                    }
                }
            }
        }
        
        totalSalary = commission + basicSalary + allowanceCap;
        
        return totalSalary;
    }
    
    private double employeeBonus(String employeeID, String status, String yearInput, String monthInput) throws Exception {
       
        double totalbonus = 0, salesPrice = 0;
        
        String year, month;
        
        LocalDate currentDate = LocalDate.now();
        
        if (yearInput.isEmpty()){year = Integer.toString(currentDate.getYear());}
        else {year = yearInput;}

        if (monthInput.isEmpty()){month = Integer.toString(currentDate.getMonthValue());}
        else {
            if(monthInput.length() == 2){
                 month = monthInput;
            }else{
                 month = "0"+monthInput;
            }
               
        }
        
        int count = 0;
        List<String[]> salesData = readCsvFile("sales.csv");
        List<String[]> vehicleData = readCsvFile("vehicle.csv");
        
        for (String[] sales : salesData) {
            
            String date = sales[1];
            String dateString = year + "-" + month + "-01";
            LocalDate yearmonth = LocalDate.parse(dateString);
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM");
            String todayMonth = yearmonth.format(formatter);
            
            if (sales[4].equals(employeeID) && date.contains(todayMonth)){
                for (String[] vehicle : vehicleData) {
                    if(sales[2].equals(vehicle[0])){
                        count++;
                        salesPrice += Double.parseDouble(vehicle[4]);
                        break;
                    }
                }
            }
        }
        
        if(status.equals("1")){
            if (salesPrice <= 800000.00) {
                totalbonus = salesPrice * 0.01;
                
            } else if (salesPrice > 800000.01 && salesPrice < 1600000.00) {
                totalbonus = salesPrice * 0.0115;
                
            } else if (salesPrice > 1600000.01 && salesPrice < 2500000.00) {
                totalbonus = salesPrice * 0.0125;
                
            } else if (salesPrice >= 2500000.01){
                totalbonus = salesPrice * 0.0135;
                
            }
        }else{
            if(count > 15 || salesPrice > 1000000){
                totalbonus = 500;
            }
        }
        
        
        return totalbonus;
    }
    
    //Storing CVS file in ArrayList that will be used later for checking
    private List<String[]> readCsvFile(String fileName) throws IOException {
        
        List<String[]> records = new ArrayList<>();

        try (FileReader reader = new FileReader(fileName);
             CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT)) {

            for (CSVRecord csvRecord : csvParser) {
                String[] record = new String[csvRecord.size()];
                for (int i = 0; i < csvRecord.size(); i++) {
                    record[i] = csvRecord.get(i);
                }
                records.add(record);
            }
        }

        return records;
    }
    
    private void search(String word) throws Exception{
        File employee_csv = new File("employee.csv");
        DefaultTableModel NEW_EMPLOYEE = new DefaultTableModel();

        try{
            int start = 0;
            InputStreamReader inputstreamreader = new InputStreamReader(new FileInputStream(employee_csv));
            CSVParser csvParser = CSVFormat.DEFAULT.parse(inputstreamreader);


            for(CSVRecord csvRecord:csvParser){
                if(start == 0){
                    start =1;
                    {
                        NEW_EMPLOYEE.addColumn(csvRecord.get(0));
                        NEW_EMPLOYEE.addColumn(csvRecord.get(1));
                        NEW_EMPLOYEE.addColumn(csvRecord.get(2));
                        NEW_EMPLOYEE.addColumn(csvRecord.get(3));
                        NEW_EMPLOYEE.addColumn("employeeSalary");
                        NEW_EMPLOYEE.addColumn("employeeBonus");
                        NEW_EMPLOYEE.addColumn("totalSalary");
                    }
                }
                else
                {
                    if(csvRecord.get(0).contains(word) || csvRecord.get(1).contains(word) || csvRecord.get(2).contains(word) || csvRecord.get(3).contains(word) || csvRecord.get(4).contains(word)){
                        double salary = employeeSalary(csvRecord.get(0),csvRecord.get(2),jTextField3.getText(),jTextField4.getText());
                        double bonus = employeeBonus(csvRecord.get(0),csvRecord.get(2),jTextField3.getText(),jTextField4.getText());
                        Vector row = new Vector();
                        row.add(csvRecord.get(0));
                        row.add(csvRecord.get(1));
                        row.add(csvRecord.get(2));
                        row.add(csvRecord.get(3));
                        row.add(salary);    
                        row.add(bonus); 
                        row.add(salary + bonus); 
                        NEW_EMPLOYEE.addRow(row);
                        }
                }
            }
        }catch (Exception e){
                e.printStackTrace();
            }

            jTable1.setModel(NEW_EMPLOYEE);
            jScrollPane1.setViewportView(jTable1);
    }
}


